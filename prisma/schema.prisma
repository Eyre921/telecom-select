// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 用户角色枚举
enum Role {
  SUPER_ADMIN   // 超级管理员
  SCHOOL_ADMIN  // 校级管理员
  SALES_USER    // 销售用户
}

// 组织类型枚举
enum OrgType {
  SCHOOL      // 学校
  DEPARTMENT  // 院系
}

// 用户模型 (管理员/营销人员)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?   // 用于存储加密后的密码
  image         String?
  role          Role      @default(SALES_USER) // 默认角色改为销售用户
  accounts      Account[]
  sessions      Session[]
  
  // 新增：用户组织关系
  organizations UserOrganization[]
  
  // 新增：审计字段
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// 组织表
model Organization {
  id        String   @id @default(cuid())
  name      String   // 组织名称
  type      OrgType  // 组织类型：学校或院系
  parentId  String?  // 父级组织ID（院系的父级是学校）
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // 关联关系
  parent       Organization?       @relation("OrgHierarchy", fields: [parentId], references: [id])
  children     Organization[]      @relation("OrgHierarchy")
  userOrgs     UserOrganization[]
  schoolNumbers    PhoneNumber[]   @relation("SchoolNumbers")
  departmentNumbers PhoneNumber[]  @relation("DepartmentNumbers")
}

// 用户组织关系表
model UserOrganization {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           Role         // 用户在该组织中的角色
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  // 关联关系
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // 确保用户在同一组织中只有一个角色
  @@unique([userId, organizationId])
}

// Next-Auth 必需模型
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 核心业务模型：号码表
model PhoneNumber {
  id                  String             @id @default(cuid())
  phoneNumber         String             @unique
  isPremium           Boolean            @default(false)
  premiumReason       String?
  reservationStatus   ReservationStatus  @default(UNRESERVED)
  orderTimestamp      DateTime?
  paymentAmount       Float?
  paymentMethod       PaymentMethod?
  transactionId       String?
  assignedMarketer    String?
  customerName        String?
  customerContact     String?
  shippingAddress     String?
  emsTrackingNumber   String?
  deliveryStatus      DeliveryStatus?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  
  // 新增：组织关联字段
  schoolId            String?            // 所属学校ID
  departmentId        String?            // 所属院系ID
  
  // 新增：组织关联关系
  school              Organization?      @relation("SchoolNumbers", fields: [schoolId], references: [id])
  department          Organization?      @relation("DepartmentNumbers", fields: [departmentId], references: [id])
}

// 枚举类型定义
enum ReservationStatus {
  UNRESERVED
  PENDING_REVIEW
  RESERVED
}

enum PaymentMethod {
  WECHAT
  ALIPAY
  CASH
  OTHER
}

enum DeliveryStatus {
  EMPTY
  IN_TRANSIT_UNACTIVATED
  IN_TRANSIT_ACTIVATED
  RECEIVED_UNACTIVATED
}